heat_template_version: 2014-10-16
description: >
  A template showing how to deploy software config to a group of servers.
parameters:
  key_name:
    type: string
    description: keypair to enable SSH access to the instance.
    default: heat_key
  image:
    type: string
    description: ID of the image to use for the instance to be created.
    default: centos7-software-config-v3
  flavor:
    type: string
    description: Type of the instance to be created.
    default: m1.small
  private_net:
    type: string
    description: private network name into which servers get deployed
    default: private
  public_net:
    type: string
    description: public network name for which floating IP addresses will be allocated
    default: public
  minion_count:
    type: number
    default: 2
resources:
  shared_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: MINIONIPS
          default: 'NONE'
        - name: DNSSERVER
          default: '129.176.199.5'
        - name: DNSDOMAIN
          default: 'mayo.edu'  
      config: |
        #!/bin/bash
        set -x
        #DNSSERVER="129.176.199.5"
        #DNSDOMAIN="mayo.edu"
        #exec 3>&1 4>&2 >master.log 2>&1
        export THISHOSTIP=$(/sbin/ip -o -4 addr list eth0 | awk '{print $4}' | cut -d/ -f1)
        #Set the hostname
        HOSTNAME="host-$(echo $THISHOSTIP | sed 's/\./\-/g')"
        hostname $HOSTNAME
        hostnamectl set-hostname $HOSTNAME
        # Fix the name resolution
        if [[ -z $DNSSERVER ]]
        then
            echo "DNS Server IP not set..."
        else
            echo "nameserver $DNSSERVER" >> /etc/resolv.conf
        fi
        
        if [[ -z $DNSDOMAIN ]]
        then
            echo "DNS Domain Name not set..."
        else
            sed -i "/^search/{s/$/ $DNSDOMAIN/}" /etc/resolv.conf
        fi
        #When reboot happens
        chmod +x /etc/rc.d/rc.local
        cat <<EOF > /etc/openstack-nameserver.conf
        DNSSERVER=$DNSSERVER
        DNSDOMAIN=$DNSDOMAIN
        HOSTNAME=$HOSTNAME
        EOF
        
        #To ensure idenpotance of this script
        if [ -e /etc/rc.d/rc.local.original ] ; then
         cp /etc/rc.d/rc.local.original /etc/rc.d/rc.local
        else
         cp /etc/rc.d/rc.local /etc/rc.d/rc.local.original
        fi
        #Fix the DNS server Ip on consecutive boots, note the quotes around EOF
        cat <<'EOF' >> /etc/rc.d/rc.local
        if [ -e /etc/openstack-nameserver.conf ]
        then
            source /etc/openstack-nameserver.conf
            if [[ -z $DNSSERVER ]]
            then
                echo "DNS Server IP not set..."
            else
                echo "nameserver $DNSSERVER" >> /etc/resolv.conf
            fi
            if [[ -z $DNSDOMAIN ]]
            then
                echo "DNS Domain Name not set..."
            else
                sed -i "/^search/{s/$/ $DNSDOMAIN/}" /etc/resolv.conf
            fi
        fi
        EOF
        
        echo $MINIONIPS
        IPS=$(echo $MINIONIPS | sed "s/u'[0-9]*'://g" | sed -r "s/[{u',}]+//g")
        echo $IPS
        #restore stdout and stderr
        #exec 1>&3 2>&4
   
  deploys:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: HEAT_SIGNAL
      input_values:
        MINIONIPS: {get_attr: [minion_servers, attributes, first_address]}
      server: {get_resource: master }
      config: {get_resource: shared_config }

  master:
    type: OS::Nova::Server
    properties:
      # The "%index%" in the name property is only available since Juno
      name: kube-master
      image: { get_param: image}
      key_name: { get_param: key_name }
      flavor: { get_param: flavor }
      user_data_format: SOFTWARE_CONFIG

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: public
      port_id: {get_attr: [master, addresses, private, 0, port]}

  minion_shared_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
        - name: MASTERIP
          default: 'NONE'
        - name: DNSSERVER
          default: '129.176.199.5'
        - name: DNSDOMAIN
          default: 'mayo.edu'  
      config: |
        #!/bin/bash
        set -x
        #DNSSERVER="129.176.199.5"
        #DNSDOMAIN="mayo.edu"
        #exec 3>&1 4>&2 >minion.log 2>&1
        export THISHOSTIP=$(/sbin/ip -o -4 addr list eth0 | awk '{print $4}' | cut -d/ -f1)
        #Set the hostname
        HOSTNAME="host-$(echo $THISHOSTIP | sed 's/\./\-/g')"
        hostname $HOSTNAME
        hostnamectl set-hostname $HOSTNAME
        # Fix the name resolution
        if [[ -z $DNSSERVER ]]
        then
            echo "DNS Server IP not set..."
        else
            echo "nameserver $DNSSERVER" >> /etc/resolv.conf
        fi
        
        if [[ -z $DNSDOMAIN ]]
        then
            echo "DNS Domain Name not set..."
        else
            sed -i "/^search/{s/$/ $DNSDOMAIN/}" /etc/resolv.conf
        fi
        #When reboot happens
        chmod +x /etc/rc.d/rc.local
        cat <<EOF > /etc/openstack-nameserver.conf
        DNSSERVER=$DNSSERVER
        DNSDOMAIN=$DNSDOMAIN
        HOSTNAME=$HOSTNAME
        EOF
        
        #To ensure idenpotance of this script
        if [ -e /etc/rc.d/rc.local.original ] ; then
         cp /etc/rc.d/rc.local.original /etc/rc.d/rc.local
        else
         cp /etc/rc.d/rc.local /etc/rc.d/rc.local.original
        fi
        #Fix the DNS server Ip on consecutive boots, note the quotes around EOF
        cat <<'EOF' >> /etc/rc.d/rc.local
        if [ -e /etc/openstack-nameserver.conf ]
        then
            source /etc/openstack-nameserver.conf
            if [[ -z $DNSSERVER ]]
            then
                echo "DNS Server IP not set..."
            else
                echo "nameserver $DNSSERVER" >> /etc/resolv.conf
            fi
            if [[ -z $DNSDOMAIN ]]
            then
                echo "DNS Domain Name not set..."
            else
                sed -i "/^search/{s/$/ $DNSDOMAIN/}" /etc/resolv.conf
            fi
        fi
        EOF
                   
        echo $MASTERIP
        IPS=$(echo $MASTERIP | sed 's/\"//g') 
        echo $IPS
        #restore stdout and stderr
        #exec 1>&3 2>&4
   
  minion_deploys:
    type: OS::Heat::SoftwareDeployments
    properties:
      signal_transport: HEAT_SIGNAL
      input_values:
        MASTERIP: {get_attr: [master, first_address]}
      servers: {get_attr: [minion_servers, attributes, show, id]}
      config: {get_resource: minion_shared_config }

  minion_servers:
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: minion_count}
      resource_def:
        type: OS::Nova::Server
        properties:
          # The "%index%" in the name property is only available since Juno
          name: kube-minion%index%
          image: { get_param: image}
          key_name: { get_param: key_name }
          flavor: { get_param: flavor }
          user_data_format: SOFTWARE_CONFIG
outputs:
  d_outs:
    value: {get_attr: [deploys, deploy_stdouts]}
  d_errors:
    value: {get_attr: [deploys, deploy_stderrs]}
  d_codes:
    value: {get_attr: [deploys, deploy_status_codes]}
  md_outs:
    value: {get_attr: [minion_deploys, deploy_stdouts]}
  md_errors:
    value: {get_attr: [minion_deploys, deploy_stderrs]}
  md_codes:
    value: {get_attr: [minion_deploys, deploy_status_codes]}
  master_list:
    value: {get_attr: [master, show, id]}
  master_ips:
    value: {get_attr: [master, first_address]}
  master_public_ip:
    description: Floating IP address of kube-master in public network
    value: { get_attr: [floating_ip, floating_ip_address ] }
  minion_list:
    value: {get_attr: [minion_servers, attributes, show, id]}
  minion_ips:
    value: {get_attr: [minion_servers, attributes, first_address]}